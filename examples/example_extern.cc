
#include "kautil/algorithm/quick_sort/extern.h"
#include "kautil/sharedlib/sharedlib.h"
#include <vector>
#include <fstream>
#include <filesystem>
#include <cassert>

#define __i(i) (*reinterpret_cast<int*>(i))
#define fst(v) reinterpret_cast<std::fstream *>(v)


int file_sort_cmp(intptr_t l,intptr_t r,void * arg){
    using ofs_t = std::fstream::off_type;
    int bufl,bufr;
    fst(arg)->seekg(ofs_t(l),std::ios_base::beg);
    fst(arg)->read((char*)&bufl,sizeof(bufl));
    fst(arg)->seekg(ofs_t(r),std::ios_base::beg);
    fst(arg)->read((char*)&bufr,sizeof(bufr));
    fst(arg)->flush(); // need to run here
    return bufl - bufr;
}
void file_sort_swap(intptr_t l,intptr_t r,void * arg){
    int bufl,bufr;
    fst(arg)->seekg(l,std::ios_base::beg);
    fst(arg)->read((char*)&bufl,sizeof(bufl));
    fst(arg)->seekg(r,std::ios_base::beg);
    fst(arg)->read((char*)&bufr,sizeof(bufr));

    fst(arg)->seekg(l,std::ios_base::beg);
    fst(arg)->write((char*)&bufr,sizeof(bufr));
    fst(arg)->seekg(r,std::ios_base::beg);
    fst(arg)->write((char*)&bufl,sizeof(bufl));
    fst(arg)->flush();
}
intptr_t file_sort_seek(intptr_t l,int64_t const& ofs,void* arg){ return l + ofs; }

static auto base = std::vector{ int(9), 3, 4,5,100,200,300, 2, 1, 8,8,8,100,200,300,-1};
static auto _base_file = "base_file_sort_test";
const char * base_file_initialize(){
    std::ofstream of(_base_file,std::ios::binary|std::ios::trunc);
    for(auto const& el : base ) of.write((char*)&el, sizeof(el));
    return _base_file;
}

void base_file_show(){
    std::ifstream ifs(_base_file,std::ios::in|std::ios::binary);
    auto data = std::vector<int>();
    auto bytes = std::filesystem::file_size(_base_file);
    data.resize(bytes/sizeof(int));
    ifs.read((char *)data.data(),bytes);
    for(auto & elem : data) printf("%d ",elem);
    printf("\n");
}


#define OPTION_THREA_MAX_COUNT 2

int main() {

    {
        auto dlhdl = kautil_dlopen(KAUTIL_QUICK_SORT_SHARED, rtld_nodelete | rtld_lazy);
        // auto dlhdl = kautil_dlopen("it was possible to use dll generated by mingw on msvc in my environment." rtld_nodelete | rtld_lazy);
        auto init = (void *(*)()) kautil_dlsym(dlhdl, "_kautil_quick_sort_initialize");
        assert(init);
        auto finalize = (void (*)(void *)) kautil_dlsym(dlhdl, "_kautil_quick_sort_initialize");
        auto thread_arguments_alloc = __dlsym(dlhdl, _kautil_quick_sort_thread_arguments_alloc);
        auto thread_arguments_set = __dlsym(dlhdl, _kautil_quick_sort_thread_arguments_set);
        auto set = __dlsym(dlhdl, _kautil_quick_sort_set);
        auto intptr = __dlsym(dlhdl, _kautil_quick_sort_intptr);
        auto voidptr = __dlsym(dlhdl, _kautil_quick_sort_voidptr);
        auto file = base_file_initialize();

        auto hdl = init();
        set(hdl, sizeof(int), file_sort_cmp, file_sort_swap /*,file_sort_seek*/ );
        auto thread_number = OPTION_THREA_MAX_COUNT;
        thread_arguments_alloc(hdl, thread_number);
        auto ofs = std::vector < std::fstream > {};
        for (auto i = 0; i < thread_number; ++i) {
            ofs.emplace_back(std::fstream{file, std::ios::in | std::ios::out | std::ios::binary});
            assert(ofs.back().is_open());
        }
        for (auto i = 0; i < thread_number; ++i) thread_arguments_set(hdl, &ofs[i], i);
        intptr(hdl, 0, std::filesystem::file_size(file));
        finalize(hdl);
        base_file_show();


        kautil_dlclose(dlhdl);
    }

}